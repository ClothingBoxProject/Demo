plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.github.node-gradle.node' version '3.5.1' // Node.js 플러그인 추가
}

group = 'com.first'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(20)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.jetbrains:annotations:24.0.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'mysql:mysql-connector-java:8.0.33' // MySQL Connector
	implementation 'io.github.cdimascio:dotenv-java:3.0.0' //.env

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'jakarta.persistence:jakarta.persistence-api'
}
// Node.js 및 npm 설정
node {
	version = '18.16.0' // Node.js 버전 (필요 시 수정)
	npmVersion = '9.5.1' // npm 버전 (필요 시 수정)
	download = true // Node.js와 npm을 자동으로 다운로드
}

// React 의존성 설치 task
tasks.register('buildFrontend', Exec) {
	workingDir = file('src/main/frontend') // React 프로젝트 경로
	commandLine 'C:/Program Files/nodejs/npm.cmd', 'install' // npm install 실행
	// 조건: package-lock.json 또는 package.json 변경 시만 실행
	inputs.file(file('src/main/frontend/package.json'))
	inputs.file(file('src/main/frontend/package-lock.json'))
	outputs.dir(file('src/main/frontend/node_modules')) // node_modules 결과 캐시
}

// React 빌드 task
tasks.register('buildReact', Exec) {
	dependsOn 'buildFrontend'
	workingDir = file('src/main/frontend') // React 프로젝트 경로
	commandLine 'C:/Program Files/nodejs/npm.cmd', 'run', 'build' // React 빌드 실행

	inputs.dir(file('src/main/frontend/src')) // React 소스 디렉토리
	outputs.dir(file('src/main/frontend/dist')) // 빌드 결과 캐시
}

// React 빌드 결과를 Spring Boot 정적 리소스 디렉토리로 복사
tasks.register('copyFrontendToStatic', Copy) {
	dependsOn 'buildReact'
	from file('src/main/frontend/dist') // React 빌드 결과 경로
	into file('src/main/resources/static') // Spring Boot 정적 리소스 경로

	inputs.dir(file('src/main/frontend/dist'))
	outputs.dir(file('src/main/resources/static'))
}

// processResources 태스크가 copyFrontendToStatic 태스크 이후에 실행되도록 설정
tasks.named('processResources') {
	dependsOn 'copyFrontendToStatic'
}

// Spring Boot 빌드와 React 빌드 연결
bootJar {
	dependsOn 'copyFrontendToStatic' // Spring Boot 빌드 전에 React 빌드 수행
}


tasks.named('test') {
	useJUnitPlatform()
}
